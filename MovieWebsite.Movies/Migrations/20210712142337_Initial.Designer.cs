// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MovieWebsite.Movies.Models.Databases;

namespace MovieWebsite.Movies.Migrations
{
    [DbContext(typeof(CultureDb))]
    [Migration("20210712142337_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.7")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MovieWebsite.Movies.Models.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("MovieWebsite.Movies.Models.BookCharacter", b =>
                {
                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.HasKey("BookId", "CharacterId");

                    b.HasIndex("CharacterId");

                    b.ToTable("BookCharacter");
                });

            modelBuilder.Entity("MovieWebsite.Movies.Models.Character", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Characters");
                });

            modelBuilder.Entity("MovieWebsite.Movies.Models.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Movies");
                });

            modelBuilder.Entity("MovieWebsite.Movies.Models.MovieCharacter", b =>
                {
                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.HasKey("CharacterId", "MovieId");

                    b.HasIndex("MovieId");

                    b.ToTable("MovieCharacter");
                });

            modelBuilder.Entity("MovieWebsite.Movies.Models.MoviePerson", b =>
                {
                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<int?>("MovieId1")
                        .HasColumnType("int");

                    b.HasKey("MovieId", "PersonId");

                    b.HasIndex("MovieId1");

                    b.HasIndex("PersonId");

                    b.ToTable("MoviePerson");
                });

            modelBuilder.Entity("MovieWebsite.Movies.Models.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("MovieWebsite.Movies.Models.PersonBook", b =>
                {
                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.HasKey("BookId", "PersonId");

                    b.HasIndex("PersonId");

                    b.ToTable("PersonBook");
                });

            modelBuilder.Entity("MovieWebsite.Movies.Models.PersonCharacter", b =>
                {
                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.HasKey("CharacterId", "PersonId");

                    b.HasIndex("PersonId");

                    b.ToTable("PersonCharacter");
                });

            modelBuilder.Entity("MovieWebsite.Movies.Models.PersonSerial", b =>
                {
                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<int>("SerialId")
                        .HasColumnType("int");

                    b.Property<int?>("SerialId1")
                        .HasColumnType("int");

                    b.HasKey("PersonId", "SerialId");

                    b.HasIndex("SerialId");

                    b.HasIndex("SerialId1");

                    b.ToTable("PersonSerial");
                });

            modelBuilder.Entity("MovieWebsite.Movies.Models.Serial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Serials");
                });

            modelBuilder.Entity("MovieWebsite.Movies.Models.SerialCharacter", b =>
                {
                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.Property<int>("SerialId")
                        .HasColumnType("int");

                    b.HasKey("CharacterId", "SerialId");

                    b.HasIndex("SerialId");

                    b.ToTable("SerialCharacter");
                });

            modelBuilder.Entity("MovieWebsite.Movies.Models.BookCharacter", b =>
                {
                    b.HasOne("MovieWebsite.Movies.Models.Book", "Book")
                        .WithMany("BookCharacters")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieWebsite.Movies.Models.Character", "Character")
                        .WithMany("BookCharacters")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Character");
                });

            modelBuilder.Entity("MovieWebsite.Movies.Models.MovieCharacter", b =>
                {
                    b.HasOne("MovieWebsite.Movies.Models.Character", "Character")
                        .WithMany("MovieCharacters")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieWebsite.Movies.Models.Movie", "Movie")
                        .WithMany("MovieCharacters")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("MovieWebsite.Movies.Models.MoviePerson", b =>
                {
                    b.HasOne("MovieWebsite.Movies.Models.Movie", "Movie")
                        .WithMany("MovieDirectors")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieWebsite.Movies.Models.Movie", null)
                        .WithMany("MovieActors")
                        .HasForeignKey("MovieId1");

                    b.HasOne("MovieWebsite.Movies.Models.Person", "Person")
                        .WithMany("PersonMovies")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("MovieWebsite.Movies.Models.PersonBook", b =>
                {
                    b.HasOne("MovieWebsite.Movies.Models.Book", "Book")
                        .WithMany("BookAuthors")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieWebsite.Movies.Models.Person", "Person")
                        .WithMany("PersonBooks")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("MovieWebsite.Movies.Models.PersonCharacter", b =>
                {
                    b.HasOne("MovieWebsite.Movies.Models.Character", "Character")
                        .WithMany("PersonCharacters")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieWebsite.Movies.Models.Person", "Person")
                        .WithMany("PersonCharacters")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("MovieWebsite.Movies.Models.PersonSerial", b =>
                {
                    b.HasOne("MovieWebsite.Movies.Models.Person", "Person")
                        .WithMany("PersonSerials")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieWebsite.Movies.Models.Serial", "Serial")
                        .WithMany("ActorSerials")
                        .HasForeignKey("SerialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieWebsite.Movies.Models.Serial", null)
                        .WithMany("PersonSerials")
                        .HasForeignKey("SerialId1");

                    b.Navigation("Person");

                    b.Navigation("Serial");
                });

            modelBuilder.Entity("MovieWebsite.Movies.Models.SerialCharacter", b =>
                {
                    b.HasOne("MovieWebsite.Movies.Models.Character", "Character")
                        .WithMany("SerialCharacters")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieWebsite.Movies.Models.Serial", "Serial")
                        .WithMany("SerialCharacters")
                        .HasForeignKey("SerialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("Serial");
                });

            modelBuilder.Entity("MovieWebsite.Movies.Models.Book", b =>
                {
                    b.Navigation("BookAuthors");

                    b.Navigation("BookCharacters");
                });

            modelBuilder.Entity("MovieWebsite.Movies.Models.Character", b =>
                {
                    b.Navigation("BookCharacters");

                    b.Navigation("MovieCharacters");

                    b.Navigation("PersonCharacters");

                    b.Navigation("SerialCharacters");
                });

            modelBuilder.Entity("MovieWebsite.Movies.Models.Movie", b =>
                {
                    b.Navigation("MovieActors");

                    b.Navigation("MovieCharacters");

                    b.Navigation("MovieDirectors");
                });

            modelBuilder.Entity("MovieWebsite.Movies.Models.Person", b =>
                {
                    b.Navigation("PersonBooks");

                    b.Navigation("PersonCharacters");

                    b.Navigation("PersonMovies");

                    b.Navigation("PersonSerials");
                });

            modelBuilder.Entity("MovieWebsite.Movies.Models.Serial", b =>
                {
                    b.Navigation("ActorSerials");

                    b.Navigation("PersonSerials");

                    b.Navigation("SerialCharacters");
                });
#pragma warning restore 612, 618
        }
    }
}
